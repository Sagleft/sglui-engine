package license

import (
	"encoding/json"
	"fmt"
	"log"

	"github.com/hyperboloide/lk"
)

type LicenseHandler interface {
	// GrantUserAccess - register user access and create license
	GrantUserAccess(UserData) (License, error)
}

type defaultHandler struct {
	licensePrivateKey *lk.PrivateKey
}

// secretKey - base32 encoded private key generated by `lkgen gen` note that you might
// prefer reading it from a file, and that it should stay secret
// (ie: dont distribute it with your app)!
func NewHandler(appSecretKey string) (LicenseHandler, error) {
	var err error
	h := &defaultHandler{}
	h.licensePrivateKey, err = lk.PrivateKeyFromB32String(appSecretKey)
	if err != nil {
		return nil, fmt.Errorf("decode app key: %w", err)
	}
	return h, nil
}

func (h *defaultHandler) GrantUserAccess(data UserData) (License, error) {
	licBytes, err := json.Marshal(data)
	if err != nil {
		return nil, fmt.Errorf("encode license to json: %w", err)
	}

	// generate license with the private key and the document
	l := &defaultLicense{}
	l.licenseData, err = lk.NewLicense(h.licensePrivateKey, licBytes)
	if err != nil {
		log.Fatal(err)

	}
	return l, nil
}
